server:
  port: ${webserver.port}
  servlet:
    context-path: /
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/javascript,application/javascript,application/json
    min-response-size: 1024
  undertow:
    threads:
      worker: 64
      io: 4

spring:
  profiles:
    active: ${ENV:dev}
  application:
    name: booking
  modulith:
    republish-outstanding-events-on-restart: true
    events:
      externalization:
        enabled: true
  liquibase:
    enabled: true
    change-log: classpath:/db/changelog/db.changelog-master.yaml
  datasource:
    url: jdbc:postgresql://${postgres.host}:${postgres.port}/${postgres.database}?sslmode=Require;TrustServerCertificate=true
    username: ${postgres.username}
    password: ${postgres.password}
  rabbitmq:
    username: ${rabbitmq.username}
    password: ${rabbitmq.password}
  hikari:
    auto-commit: false
    connection-timeout: 250
    max-lifetime: 60000
    maximum-pool-size: 20
    minimum-idle: 10
    pool-name: master
  jpa:
    open-in-view: false
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      "[hibernate.dialect]": org.hibernate.dialect.PostgreSQLDialect
      "[hibernate.generate_statics]": false
      "[hibernate.connection.provider_disables_autocommit]": ${postgres.disables_autocommit:true}
  elasticsearch:
    uris: ${elasticsearch.uris}
    username: ${elasticsearch.username}
    password: ${elasticsearch.password}
    connect-timeout: 10_000
    socket-timeout: 10_000

kafka:
  bootstrap-servers: ${kafka:bootstrap-servers}
  auto-create-topics: false
  pool-timeout: 1_000
  consumers:
    flights:
      auto-offset-reset: earliest
      concurrency: 1
      id: kafka-listener-flights
      topics: admin_flights.public.flights
      group-id: flights-catalog
      max-attempts: 4

# Observability
management:
  tracing:
    sampling:
      probability: '1.0'
  otlp:
    metrics:
      export:
        enabled: true
        url: ${opentelemetry.metrics.url}
    tracing:
      enabled: true
      endpoint: ${opentelemetry.tracing.endpoint}
  endpoints:
    web:
      exposure:
        include: { }
  metrics:
    export:
      otlp:
        enabled: true

rabbit:
  queues:
    booking-created:
      exchange: booking.exchange
      queue: booking.created.queue
      routingKey: booking.created
      dlx: booking.created.queue.dlx
      dlq: booking.created.queue.dlq
      dlqRoutingKey: booking.created.queue.dlq
      ttl: 300000
    booking-confirmed:
      exchange: booking.exchange
      queue: booking.confirmed.queue
      routingKey: booking.confirmed
      dlx: booking.confirmed.queue.dlx
      dlq: booking.confirmed.queue.dlq
      dlqRoutingKey: booking.confirmed.queue.dlq
      ttl: 300000
    booking-failed:
      exchange: booking.exchange
      queue: booking.failed.queue
      routingKey: booking.failed
      dlx: booking.failed.queue.dlx
      dlq: booking.failed.queue.dlq
      dlqRoutingKey: booking.failed.queue.dlq
      ttl: 300000
